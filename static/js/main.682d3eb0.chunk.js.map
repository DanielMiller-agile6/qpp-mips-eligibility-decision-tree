{"version":3,"sources":["components/MipsDecisionTree/DialogItem.js","components/MipsDecisionTree/index.js","App.js","serviceWorker.js","index.js"],"names":["DialogItem","className","header","actions","onActionSelect","onCancel","first","style","marginLeft","marginRight","float","small","outline","onClick","map","i","to","label","key","nodesReducer","state","action","type","newNode","decisionNodes","find","node","id","payload","slice","Math","max","length","MipsDecisionTree","startingNode","useReducer","nodes","dispatch","decisionAction","useMemo","nextNode","backAction","prompt","library","add","faQuestion","faThumbsUp","faThumbsDown","faCheck","faTimes","App","marginTop","big","window","hj","triggerSurvey","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAwCeA,G,YAnCI,SAAC,GAAD,QACjBC,iBADiB,MACL,GADK,MAEjBC,cAFiB,MAER,iBAFQ,MAGjBC,eAHiB,MAGP,GAHO,MAIjBC,sBAJiB,MAIA,aAJA,MAKjBC,gBALiB,MAKN,aALM,MAMjBC,aANiB,gBAQjB,yBAAKL,UAAS,6BAAwBA,IAEpC,4BAAKC,GACL,yBAAKK,MAAO,CAAEC,WAAY,MAAOC,YAAa,SAC1CH,GACA,0BAAML,UAAU,cAAcM,MAAO,CAAEG,MAAO,SAC5C,kBAAC,SAAD,CAAQC,OAAK,EAACC,SAAO,EAACX,UAAU,oBAAoBY,QAASR,GAA7D,SAKJ,0BAAME,MAAO,CAAEG,MAAO,UACnBP,EAAQW,KAAI,WAAeC,GAAf,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACX,kBAAC,SAAD,CACEC,IAAKF,EACLf,UAAU,oBACVY,QAAS,kBAAMT,EAAeY,KAG7BC,W,OC5BPE,EAAe,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,IAAK,WACH,IAAMC,EAAUC,EAAcC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAON,EAAOO,WAC9D,MAAM,GAAN,mBAAYR,GAAZ,CAAmBG,IAErB,IAAK,OACH,OAAOH,EAAMS,MAAM,EAAGC,KAAKC,IAAIX,EAAMY,OAAS,EAAG,IAEnD,QACE,OAAOZ,IAgCEa,EA3BU,WACvB,IAAMC,EAAeV,EAAc,GADN,EAEHW,qBAAWhB,EAAc,CAACe,IAFvB,mBAEtBE,EAFsB,KAEfC,EAFe,KAIvBC,EAAiBC,mBAAQ,kBAAM,SAACC,GAAD,OAAcH,EAAS,CAC1Df,KAAM,WACNM,QAASY,OACP,CAACH,IAECI,EAAaF,mBAAQ,kBAAM,kBAAMF,EAAS,CAAEf,KAAM,YAAW,CAACe,IAE9DX,EAAOU,EAAMA,EAAMJ,OAAS,GAElC,OACE,yBAAK/B,UAAU,0BACb,kBAAC,EAAD,CACEiB,IAAKQ,EAAKC,GACVzB,OAAQwB,EAAKgB,OACbvC,QAASuB,EAAKvB,QACdC,eAAgBkC,EAChBjC,SAAUoC,EACVnC,MAAOoB,EAAKC,KAAOO,EAAaP,O,YCxBxCgB,IAAQC,IAAIC,IAAYC,IAAYC,IAAcC,IAASC,KA6B5CC,MAvBf,WACE,OACE,yBAAKjD,UAAU,OACb,4BAAQA,UAAU,cAChB,+EAEF,8BACE,yBAAKM,MAAO,CAAE4C,UAAW,SACvB,kBAAC,SAAD,CACEC,KAAG,EACHxC,SAAO,EACPX,UAAU,oBACVY,QAAS,kBAhBC,SAACwC,GACrBA,EAAOC,GAAG,QAAS,iBAeMC,CAAcF,UAJ/B,6BASF,kBAAC,EAAD,SC3BYG,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.682d3eb0.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from '@trussworks/react-uswds'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport '@trussworks/react-uswds/lib/index.css'\n\nconst DialogItem = ({\n  className = \"\",\n  header = \"Missing Header\",\n  actions = [],\n  onActionSelect = () => {},\n  onCancel = () => {},\n  first = false\n}) => (\n  <div className={`qpp-dt-dialog-item ${className}`}>\n    {/* <FontAwesomeIcon icon=\"question\" size=\"lg\"/> */}\n    <h2>{header}</h2>\n    <div style={{ marginLeft: '15%', marginRight: '15%' }}>\n      {!first && (\n        <span className=\"qpp-dt-back\" style={{ float: 'left' }}>\n          <Button small outline className=\"qpp-dt-btn-cancel\" onClick={onCancel}>\n            Back\n          </Button>\n        </span>\n      )}\n      <span style={{ float: 'right' }}>\n        {actions.map(({ to, label}, i) => (\n          <Button\n            key={to}\n            className=\"qpp-dt-btn-action\"\n            onClick={() => onActionSelect(to)}\n          >\n\n            {label}\n          </Button>\n        ))}\n      </span>\n    </div>\n  </div>\n)\n\nexport default DialogItem\n","import React, { useMemo, useReducer } from 'react'\nimport DialogItem from './DialogItem'\nimport decisionNodes from './decision-tree.json'\n\nconst nodesReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'decision': {\n      const newNode = decisionNodes.find(node => node.id === action.payload)\n      return [ ...state, newNode ]\n    }\n    case 'back': {\n      return state.slice(0, Math.max(state.length - 1, 0))\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nconst MipsDecisionTree = () => {\n  const startingNode = decisionNodes[0]\n  const [nodes, dispatch] = useReducer(nodesReducer, [startingNode])\n\n  const decisionAction = useMemo(() => (nextNode) => dispatch({\n    type: 'decision',\n    payload: nextNode\n  }), [dispatch])\n\n  const backAction = useMemo(() => () => dispatch({ type: 'back' }), [dispatch])\n\n  const node = nodes[nodes.length - 1]\n\n  return (\n    <div className=\"qpp-mips-decision-tree\">\n      <DialogItem\n        key={node.id}\n        header={node.prompt}\n        actions={node.actions}\n        onActionSelect={decisionAction}\n        onCancel={backAction}\n        first={node.id === startingNode.id}\n      />\n    </div>\n  )\n}\n\nexport default MipsDecisionTree\n","import React from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faQuestion,\n  faThumbsUp,\n  faThumbsDown,\n  faCheck,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { MipsDecisionTree } from \"./components\";\nimport { Button } from \"@trussworks/react-uswds\";\n\nimport \"@trussworks/react-uswds/lib/index.css\";\nimport \"@trussworks/react-uswds/lib/uswds.css\";\nimport \"./App.css\";\n\nlibrary.add(faQuestion, faThumbsUp, faThumbsDown, faCheck, faTimes);\n\nconst triggerSurvey = (window) => {\n  window.hj(\"event\", \"example_event\");\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>MIPS Eligibility Decision Tree - Prototype UI </h1>\n      </header>\n      <main>\n        <div style={{ marginTop: \"2rem\" }}>\n          <Button\n            big\n            outline\n            className=\"qpp-dt-btn-action\"\n            onClick={() => triggerSurvey(window)}\n          >\n            Test Event Driven Survey\n          </Button>\n        </div>\n        <MipsDecisionTree />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}